function e(e,r,o,t){return new(o||(o=Promise))((function(i,n){function d(e){try{a(t.next(e))}catch(e){n(e)}}function s(e){try{a(t.throw(e))}catch(e){n(e)}}function a(e){var r;e.done?i(e.value):(r=e.value,r instanceof o?r:new o((function(e){e(r)}))).then(d,s)}a((t=t.apply(e,r||[])).next())}))}function r(e,r,o,t){return new(o||(o=Promise))((function(r,i){function n(e){try{s(t.next(e))}catch(e){i(e)}}function d(e){try{s(t.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(n,d)}s((t=t.apply(e,[])).next())}))}"function"==typeof SuppressedError&&SuppressedError,"function"==typeof SuppressedError&&SuppressedError;const o=self;o.workerState={pyodide:null,pyodide_url:"https://cdn.jsdelivr.net/pyodide/v0.27.2/full/pyodide.mjs",micropip:null,worker:{},pyodideReady:!1,pyodideReadyPromise:null,debug:!1,interruptBuffer:null,receivepy:(e,r)=>{},handel_register:{},post_pyodide_ready:void 0},o.reset=()=>r(void 0,0,void 0,(function*(){var e;for(const r in o.list_workers())try{const t=yield o.get_worker(r);t.worker&&t.worker.stop(),null===(e=t.reject_promise)||void 0===e||e.call(t,"Worker reset")}catch(e){}o.workerState.pyodide&&o.interrupt(),o.workerState.pyodide=null,o.workerState.micropip=null,o.workerState.worker={},o.workerState.pyodideReady=!1;try{o.workerState.interruptBuffer=new Uint8Array(new SharedArrayBuffer(1)),o.workerState.interruptBuffer[0]=0}catch(e){}})),o.initializePyodide=()=>r(void 0,0,void 0,(function*(){var e,r;if(!o.workerState.pyodide){console.debug("Loading Pyodide..."),yield o.reset(),console.debug("Loading Pyodide module...");const e=yield import(o.workerState.pyodide_url);console.debug("Loading Pyodide instance...");const r=e.loadPyodide,t=o.workerState.pyodide_url.split("/").slice(0,-1).join("/");o.workerState.pyodide=yield r({packages:["micropip"],indexURL:t}),o.workerState.interruptBuffer&&o.workerState.pyodide.setInterruptBuffer(o.workerState.interruptBuffer)}return o.workerState.micropip||(console.debug("Importing micropip..."),o.workerState.micropip=o.workerState.pyodide.pyimport("micropip")),console.debug("Pyodide ready. Installing funcnodes..."),yield o.workerState.micropip.install("funcnodes-pyodide"),console.debug("Importing funcnodes..."),yield o.workerState.pyodide.runPythonAsync("import funcnodes_pyodide"),console.debug("Running post_pyodide_ready..."),yield null===(r=(e=o.workerState).post_pyodide_ready)||void 0===r?void 0:r.call(e,o.workerState),console.debug("Pyodide ready"),o.workerState.pyodideReady=!0,{pyodide:o.workerState.pyodide,micropip:o.workerState.micropip}})),o.interrupt=()=>{o.workerState.interruptBuffer&&(o.workerState.interruptBuffer[0]=1)},o.list_workers=()=>Object.keys(o.workerState.worker),o.get_worker=e=>r(void 0,0,void 0,(function*(){if(!e)throw new Error("Worker id is required");if(!o.workerState.worker[e])throw new Error(`Worker with id ${e} not found`);return yield o.workerState.worker[e].make_promise,o.workerState.worker[e]})),o.has_worker=e=>{if(!e)throw new Error("Worker id is required");return!!o.workerState.worker[e]},o.get_or_create_worker=e=>r(void 0,0,void 0,(function*(){if(!e)throw new Error("Worker id is required");return o.workerState.worker[e]||(yield o.initializeFuncNodesWorker(e)),o.get_worker(e)})),o.initializeFuncNodesWorker=e=>r(void 0,0,void 0,(function*(){try{const{pyodide:t}=yield o.initializePyodide();if(!o.has_worker(e)){o.workerState.worker[e]={worker:null,make_promise:void 0};const i=new Promise(((i,n)=>r(void 0,0,void 0,(function*(){o.workerState.worker[e].reject_promise=n,console.debug(`Creating worker (${e})...`);const r=yield t.runPythonAsync(`funcnodes_pyodide.new_worker(debug=${o.workerState.debug?1:0}, uuid="${e}")`);if(console.debug("Worker created:",r),"function"!=typeof r.set_receiver)throw new Error("Worker does not expose a 'set_receiver' method.");r.set_receiver(self),o.workerState.worker[e].worker=r,console.debug("Worker ready"),i(r)}))));o.workerState.worker[e].make_promise=i}return o.get_worker(e)}catch(e){throw console.error("Error during worker initialization:",e),e}})),o.receivepy=(e,r)=>{try{let t={};if("string"==typeof e?t.msg=e:t=e,void 0===t.msg)return;"string"!=typeof t.msg&&(t.msg=JSON.stringify(t.msg)),void 0!==r&&("string"==typeof r?t.worker_id||(t.worker_id=r):t=Object.assign(Object.assign({},r),t));const i=t.worker_id;if(!i)throw new Error(`Worker id not provided in receivepy(${JSON.stringify(t)})`);if(!o.workerState.worker[i])throw new Error(`Worker with id ${i} not found in receivepy(${JSON.stringify(t)})`);o.workerState.receivepy(e,i)}catch(e){return void console.error("Error during receivepy:",e)}},o.startInitialization=({debug:e=!1,receivepy:r,pyodide_url:t,post_pyodide_ready:i})=>(o.workerState.debug=e,o.workerState.pyodide_url=t||"https://cdn.jsdelivr.net/pyodide/v0.27.2/full/pyodide.mjs",o.workerState.receivepy=r,o.workerState.pyodideReadyPromise=o.initializePyodide(),o.workerState.post_pyodide_ready=i,o.workerState),o.register_cmd_message=(e,r)=>{if(o.workerState.handel_register[e])throw new Error(`Command ${e} already registered`);o.workerState.handel_register[e]=r},o.register_cmd_message("ping",(e=>r(void 0,0,void 0,(function*(){return"pong"})))),o.register_cmd_message("state",(e=>r(void 0,0,void 0,(function*(){return{state:{loaded:o.workerState.pyodideReady}}})))),o.register_cmd_message("worker:state",(e=>r(void 0,0,void 0,(function*(){return{state:{loaded:!!(yield o.get_or_create_worker(e.worker_id)).worker}}})))),o.register_cmd_message("worker:stop",(e=>r(void 0,0,void 0,(function*(){var r;const t=yield o.get_or_create_worker(e.worker_id);return t.worker&&(t.worker.stop(),t.worker=null,null===(r=t.reject_promise)||void 0===r||r.call(t,"Worker stopped")),delete o.workerState.worker[e.worker_id],{state:{loaded:!1}}})))),o.register_cmd_message("worker:send",(e=>r(void 0,0,void 0,(function*(){const r=yield o.get_or_create_worker(e.worker_id);if(!r.worker)throw new Error("Worker is not initialized");if("function"!=typeof r.worker.receivejs)throw new Error("Worker does not support receivejs: "+typeof r.worker.receivejs);r.worker.receivejs(e.msg)})))),o.handleMessage=e=>r(void 0,0,void 0,(function*(){const r={original:e};e.id&&(r.id=e.id),void 0===e.toJs&&(e.toJs=!0);try{if(e.cmd){const t=e;if(o.workerState.handel_register[t.cmd])return r.result=yield o.workerState.handel_register[t.cmd](t),r;throw new Error("Unknown command: "+t.cmd)}throw new Error("Unknown message format: "+JSON.stringify(e))}catch(e){r.error=e.message}return r})),o.read_url_params=()=>{var e;const r=new URLSearchParams(self.location.search),o="true"===(null===(e=r.get("debug"))||void 0===e?void 0:e.toLowerCase()),t=r.get("pyodide_url")||void 0;return console.log("Debug:",o,"Pyodide URL:",t),{debug:o,pyodide_url:t}};const t=o;t.general_initalization=e=>{const r=t.read_url_params();t.startInitialization(Object.assign(Object.assign({},e),r))};const i=t;t.init_dedicated_worker=e=>{const t=o;t.onmessage=e=>r(void 0,0,void 0,(function*(){const r=e.data,o=yield t.handleMessage(r);t.postMessage(o)}));const i=Object.assign(Object.assign({},e),{receivepy:(e,r)=>{t.postMessage({cmd:"receive",msg:e,worker_id:r})}});t.general_initalization(i)},i.init_shared_worker=e=>{const t=o;t.connectedPorts=[],t.onconnect=e=>{const o=e.ports[0];t.connectedPorts.push(o),o.start(),console.debug("Port connected in shared worker"),o.onmessage=e=>r(void 0,0,void 0,(function*(){const r=e.data,i=yield t.handleMessage(r);o.postMessage(i)}))};const i=Object.assign(Object.assign({},e),{receivepy:(e,r)=>{t.connectedPorts.forEach((o=>{o.postMessage({cmd:"receive",msg:e,worker_id:r})}))}});t.general_initalization(i)};const n=t;n.nodebuilder_post_pyodide_ready=r=>e(void 0,void 0,void 0,(function*(){r.pyodide.runPythonAsync("from __future__ import annotations\nimport funcnodes_core as fn\n\nfn.node.ALLOW_REGISTERED_NODES_OVERRIDE = True\n\n\ndef eval_node_code(code: str):\n    ns = {}  # dedicated namespace acting as globals\n    exec(code, ns)\n    _node = [\n        cls\n        for name, cls in ns.items()\n        if isinstance(cls, type) and issubclass(cls, fn.Node)\n    ][-1]\n    return _node\n")})),n.register_cmd_message("worker:evalnode",(r=>e(void 0,void 0,void 0,(function*(){var e;const o=yield null===(e=n.workerState.pyodide)||void 0===e?void 0:e.runPythonAsync(`eval_node_code(${JSON.stringify(r.msg)})`);if(!o)return;const t=yield n.get_or_create_worker(r.worker_id);t.worker.clear(),t.worker.nodespace.lib.add_node(o,"demo"),t.worker.add_node(o.node_id)}))));const d=n;d.init_dedicated_worker({post_pyodide_ready:d.nodebuilder_post_pyodide_ready});
//# sourceMappingURL=pyodideDedicatedWorker.js.map
