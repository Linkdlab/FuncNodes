# this is an autogenerated file, do not edit it directly or your changes might be lost.
name: version_publish

on:
  push:
    branches:
      - main
      - master

jobs:
  version_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      id-token: write
    environment:
      name: main
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Package
        uses: ./.github/actions/install_package
        with:
          python_version: 3.12

      - name: Run Tests
        run: poetry run pytest

      - name: Get current package version
        shell: bash
        id: get_version
        run: |
          CURRENT_VERSION=$(poetry version --short)
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}"

      - name: Get latest version from PyPI
        shell: bash
        id: get_pypi_version
        run: |
          PACKAGE_NAME=$(poetry version | awk '{print $1}')
          LATEST_VERSION=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json | jq -r .info.version)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
          echo "LATEST_VERSION=${LATEST_VERSION}"

      - name: Compare versions
        shell: bash
        id: compare_versions
        run: |
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "should_update=true" >> $GITHUB_OUTPUT
          else
            echo "should_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Package project
        run: poetry build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Check if tag exists
        shell: bash
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "v$CURRENT_VERSION")
          if [ "$TAG_EXISTS" ]; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            fi

      - name: Create new tag
        shell: bash
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git config --local user.name "${GITHUB_ACTOR}"
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a v$CURRENT_VERSION -m "Release version $CURRENT_VERSION"
          git push origin v$CURRENT_VERSION
